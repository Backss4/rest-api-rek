<?php

namespace Tests\Feature;

use App\Services\Petstore\Exceptions\MalformedResponseException;
use App\Services\Petstore\Exceptions\RequestException;
use App\Services\Petstore\Petstore;
use App\Services\Petstore\Endpoints\Pet;
use App\Services\Petstore\DataTransferObjects\Pet as PetDTO;

use Exception;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Client\ConnectionException;
use Illuminate\Http\Client\Request;
use Illuminate\Http\Client\ResponseSequence;
use Illuminate\Support\Facades\Exceptions;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use Mockery;
use Mockery\MockInterface;
use Tests\TestCase;

class PetstoreTest extends TestCase
{
    /**
     * Faked url of petstore.
     * @var string
     */
    protected string $fakeUrl;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->fakeUrl = Str::after(config('petstore.url'), '//') . '*';
    }

    public function test_pet_dto_json(): void
    {
        $targetArray = [
            'id' => rand(1, 100),
            'category' => [
                'id' => 1,
                'name' => 'category'
            ],
            'name' => 'Azor',
            'photoUrls' => [],
            'tags' => [
                [
                    'id' => '15',
                    'name' => 'test'
                ],
                [
                    'id' => '16',
                    'name' => 'test2'
                ],
            ],
            'status' => 'available'
        ];
        //$targetJson = json_encode($targetArray);
        $pet = PetDTO::fromArray($targetArray);

        $this->assertEquals($targetArray, $pet->toArray());
        //$this->assertEquals($targetJson, json_encode($pet));
    }

    public function test_pet_endpoint_get(): void
    {
        /** @var PetDTO $target */
        $target = PetDTO::fromArray([
            'id' => 1,
            'category' => [
                'id' => 1,
                'name' => 'category'
            ],
            'name' => 'Azor',
            'photoUrls' => [],
            'tags' => [
                [
                    'id' => '15',
                    'name' => 'test'
                ],
            ],
            'status' => 'available'
        ]);
        Http::preventStrayRequests();
        Http::fake([
            $this->fakeUrl => Http::sequence([
                Http::failedConnection(),
                Http::failedConnection(),
                Http::failedConnection(),

                Http::response([
                    'code' => 1,
                    'type' => 'error',
                    'message' => 'Invalid ID supplied'
                ], 400),

                Http::response([
                    'code' => 1,
                    'type' => 'error',
                    'message' => 'Pet not found'
                ], 404),

                Http::response([], 200),

                Http::response($target->toArray(), 200),
            ])
        ]);

        /** @var Petstore $petStore */
        $petStore = $this->app->make(Petstore::class);

        $this->assertThrows(function () use ($petStore) {
            $petStore->pet()->get(1);
        }, ConnectionException::class);

        $this->assertThrows(function () use ($petStore) {
            $petStore->pet()->get(1);
        }, function (RequestException $ex) {
            return $ex->response->getStatusCode() === 400;
        });

        $this->assertThrows(function () use ($petStore) {
            $petStore->pet()->get(1);
        }, function (RequestException $ex) {
            return $ex->response->getStatusCode() === 404;
        });

        $this->assertThrows(function () use ($petStore) {
            $petStore->pet()->get(1);
        }, MalformedResponseException::class);

        $pet = $petStore->pet()->get(1);
        $this->assertEquals($target, $pet);
    }

    public function test_pet_resource_create(): void
    {
        /** @var PetDTO $target */
        $target = PetDTO::fromArray([
            'id' => rand(1, 100),
            'category' => [
                'id' => 1,
                'name' => 'category'
            ],
            'name' => 'Azor',
            'photoUrls' => [],
            'tags' => [
                [
                    'id' => '15',
                    'name' => 'test'
                ],
            ],
            'status' => 'available'
        ]);

        Http::preventStrayRequests();
        Http::fake([
            $this->fakeUrl => Http::sequence([
                Http::failedConnection(),
                Http::failedConnection(),
                Http::failedConnection(),

                Http::response([], 200),

                function (Request $request) {
                    if($request->isJson()) {
                        try {
                            $created = PetDTO::fromArray($request->data());
                            return Http::response($created->toArray(), 200);
                        } catch (MalformedResponseException $e) {
                            return Http::response([
                                'code' => 1,
                                'type' => 'error',
                                'message' => 'Invalid input'
                            ], 405);
                        }
                    }

                    return Http::response([
                        'code' => 1,
                        'type' => 'error',
                        'message' => 'Invalid input'
                    ], 405);
                },
            ])
        ]);

        /** @var Petstore $petStore */
        $petStore = $this->app->make(Petstore::class);

        $this->assertThrows(function () use ($petStore, $target) {
            $petStore->pet()->create($target);
        }, ConnectionException::class);

        $this->assertThrows(function () use ($petStore, $target) {
            $petStore->pet()->create($target);
        }, MalformedResponseException::class);


        $pet = $petStore->pet()->create($target);
        $this->assertEquals($target, $pet);
    }

    public function test_pet_resource_update(): void
    {
        /** @var PetDTO $target */
        $target = PetDTO::fromArray([
            'id' => 1,
            'category' => [
                'id' => 1,
                'name' => 'category'
            ],
            'name' => 'Azor',
            'photoUrls' => [],
            'tags' => [
                [
                    'id' => '15',
                    'name' => 'test'
                ],
            ],
            'status' => 'available'
        ]);

        Http::preventStrayRequests();
        Http::fake([
            $this->fakeUrl => Http::sequence([
                Http::failedConnection(),
                Http::failedConnection(),
                Http::failedConnection(),

                Http::response([], 200),

                function (Request $request) {
                    if($request->isJson()) {
                        try {
                            $created = PetDTO::fromArray($request->data());
                            return Http::response($created->toArray(), 200);
                        } catch (MalformedResponseException $e) {
                            return Http::response([
                                'code' => 1,
                                'type' => 'error',
                                'message' => 'Invalid input'
                            ], 405);
                        }
                    }

                    return Http::response([
                        'code' => 1,
                        'type' => 'error',
                        'message' => 'Invalid input'
                    ], 405);
                },
            ])
        ]);

        /** @var Petstore $petStore */
        $petStore = $this->app->make(Petstore::class);

        $this->assertThrows(function () use ($petStore, $target) {
            $petStore->pet()->create($target);
        }, ConnectionException::class);

        $this->assertThrows(function () use ($petStore, $target) {
            $petStore->pet()->create($target);
        }, MalformedResponseException::class);


        $pet = $petStore->pet()->create($target);
        $this->assertEquals($target, $pet);
    }
}
